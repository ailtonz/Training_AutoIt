###
###
###
### Category1 : 
### Category2 : 
### Category3 : 
### Description : 
###
###
###
#include <File.au3>
#include <Date.au3>
#include <MsgBoxConstants.au3>
#include <Constants.au3>
#include <StringConstants.au3>
#include <ComboConstants.au3>
#include <GUIConstantsEx.au3>
#include <Array.au3>
#include <Excel.au3>

#Region PreSets
;Quando pressionar a tecla 'Esc' sai da rotina
HotKeySet("{Esc}", "CaptureEsc")

;Liga a opção de eventos de controle
Opt("GUIOnEventMode",1)
#EndRegion

#Region Variáveis de customização
;========================================================================================================
Global $iAutomatioName = "PRV_DCH"
Global $iSheetName = "PRV_DCH.xlsx"
Global $iTransaction = "va02"
Global $WindowTitle = "pw3270"
Global $SleepTime = 1000
Global $iMsgTitle = "Automação - " & $iAutomatioName
;========================================================================================================
#EndRegion

#Region Variáveis do LOG
;========================================================================================================
Global $s_Directory = @ScriptDir
;Global $s_Directory = "\\10.128.222.36\Arrecadacao\PDTI"
Local $sData = _NowDate()
Local $xData = StringSplit($sData,"/")
Local $data = $xData[3] & $xData[2] & $xData[1]
Global $DataD = $xData[1]
Global $DataM = $xData[2]
Global $DataY = StringRight($xData[3],2)
Global $hFile = FileOpen($s_Directory & "\" & $iAutomatioName & "_" & $data & ".log", 1)
;========================================================================================================
#EndRegion

#Region Variáveis de manipulação do arquivo
;========================================================================================================
Global $s_Filename = $s_Directory & "\" & $iSheetName
Global $iExcelObj = ObjGet($s_Filename)	; Instancia o objeto com a planilha de origem
Local $iSheetName = "Robo"
ValidaExcel()
Global $iRowCount = $iExcelObj.Worksheets($iSheetName).UsedRange.Rows.Count
Global $iColumnCount = $iExcelObj.Worksheets($iSheetName).UsedRange.Columns.Count
Global $iRange = "A2:" & _Excel_ColumnToLetter($iColumnCount) & $iRowCount
Global $oDocument = $iExcelObj.Worksheets($iSheetName)
Global $iArrayValues = $oDocument.range($iRange).value
;========================================================================================================
#EndRegion

#Region Main

Global $begin = TimerInit() ; Captura início da execução do Robo

_FileWriteLog($hFile, "-----------------------------------------------------------------------------------------")
_FileWriteLog($hFile, "--- Início da automação - " & $iAutomatioName & " ---")

ConfirmaInicio()
ValidaTelaInput()
ExibeInterface()

#EndRegion

Func ValidaExcel() ;Função para validar existencia do arquivo Excel no diretório correto

	Local $iFileExists = FileExists($s_Filename)

	If Not $iFileExists Then
		_FileWriteLog($hFile, "[ERRO] ValidaExcel() - Arquivo "& $s_Filename &" não encontrado.")
		MsgBox($MB_ICONERROR, $iMsgTitle, "Arquivo " & $s_Filename & " não encontrado.")
		_Exit()
	EndIf

	_FileWriteLog($hFile, "ValidaExcel() - Arquivo "& $s_Filename &" encontrado.")

EndFunc

Func ConfirmaInicio()
	Local $iAnswer = MsgBox(BitOR($MB_YESNO, $MB_SYSTEMMODAL), $iMsgTitle, "Esse script irá processar os dados da planilha " & $s_Filename & ".  Deseja continuar?")
	If $iAnswer = 7 Then 	; Verifica se o usuário abortou a operação
		_FileWriteLog($hFile, "--- Processo abortado pelo usuário ---")
		MsgBox(0, $iMsgTitle, "Processo abortado pelo usuário")
		_Exit()
	EndIf
EndFunc

Func ValidaTelaInput() ;Função para validar se a janela a receber o input está aberta e ativa

   ;Verifica se janela existe
   If WinExists("[REGEXPTITLE:" & $WindowTitle & ".+]") Then

		;Faz ativação da janela
		WinActivate("[REGEXPTITLE:" & $WindowTitle & ".+]")

		;Aguarda ativação da janela por 10 segundos
		$nSapAtv = WinWaitActive("[REGEXPTITLE:" & $WindowTitle & ".+]", "",10)

		if $nSapAtv <> 0 Then
			;Maximiza e Ativa Tela Inicial
			WinSetState("[REGEXPTITLE:" & $WindowTitle & ".+]", "", @SW_MAXIMIZE)
			WinActivate("[REGEXPTITLE:" & $WindowTitle & ".+]")
		Else
			;Timeout
			_FileWriteLog($hFile, "[ERRO] ValidaTelaInput() - Timeout na ativação da tela " & $WindowTitle & ".")
			MsgBox($MB_ICONERROR, $iMsgTitle, "O tempo de ativação da tela '" & $WindowTitle & "' expirou. Favor tentar novamente.")
			_Exit()
		EndIf
   Else
		;Janela não está ativa
		_FileWriteLog($hFile, "[ERRO] ValidaTelaInput() - Janela " & $WindowTitle & " inativa.")
		MsgBox($MB_ICONERROR, $iMsgTitle, "Esta automação necessita de uma aplicação de nome " & $WindowTitle & ". Por favor abra esta aplicação antes de iniciar o processo.")
		_Exit()
   EndIf

EndFunc

Func ExibeInterface()

	Global $hGUI = GUICreate($iMsgTitle, 460, 226)
	GUISetOnEvent($GUI_EVENT_CLOSE, "ConfirmaEncerramento")

	$Label3 = GUICtrlCreateLabel("Classe", 16, 16, 35, 17)
	Global $cboClasse = GUICtrlCreateCombo("<<SELECIONE>>", 56, 14, 145, 25, BitOR($CBS_DROPDOWN,$CBS_AUTOHSCROLL))
	GUICtrlSetData(-1, "PRV|DCH")
	Global $txtPrvQtd = GUICtrlCreateInput("", 280, 16, 41, 21)
	$Label4 = GUICtrlCreateLabel("Dias PRV", 224, 18, 50, 17)

	;-- Grupo de dados para acesso
	$Group1 = GUICtrlCreateGroup("Acesso     ", 8, 48, 441, 73)
	$Label1 = GUICtrlCreateLabel("Usuário (com letra e dígito)", 24, 72, 40, 17)
	$Label2 = GUICtrlCreateLabel("Senha", 168, 72, 35, 17)
	Global $txtUser = GUICtrlCreateInput("", 24, 88, 121, 21)
	Global $txtPwd = GUICtrlCreateInput("", 168, 88, 121, 21, "35")
	$Label5 = GUICtrlCreateLabel("Senha Comercial", 312, 72, 84, 17)
	Global $txtPwdCml = GUICtrlCreateInput("", 312, 88, 121, 21, "35")
	GUICtrlCreateGroup("", -99, -99, 1, 1)

	;-- Grupo de opções
	$Group2 = GUICtrlCreateGroup("Opções     ", 8, 128, 441, 57)
	Global $chkLINA = GUICtrlCreateCheckbox("LINA", 24, 152, 97, 17)
	Global $Checkbox2 = GUICtrlCreateCheckbox("?????", 128, 152, 97, 17)
	Global $Checkbox3 = GUICtrlCreateCheckbox("????", 232, 152, 97, 17)
	Global $chkTodos = GUICtrlCreateCheckbox("TODOS", 8, 192, 97, 17)
	GUICtrlCreateGroup("", -99, -99, 1, 1)

	;-- Botão
	$cmdOk = GUICtrlCreateButton("OK", 344, 192, 107, 25)
	GUICtrlSetOnEvent($cmdOk, "ValidaInterface")
	GUISetState(@SW_SHOW)

	;-- Aguarda ação do usuário
	While 1
		Sleep(10); comando para nao usar muito a CPU
	WEnd
EndFunc

Func ValidaInterface()
	Local $strAux = ""

	if GUICtrlRead($cboClasse) <> "PRV" and GUICtrlRead($cboClasse) <> "DCH" Then
		$strAux = $strAux & "  - Nenhuma classe selecionada no combo." & @CRLF
	Else
		Global $classe = GUICtrlRead($cboClasse)
		Global $tipo = ""
		if $classe = "PRV" then
			$tipo = "P" & GUICtrlRead($txtPrvQtd)
		EndIf
	EndIf

	if Number(GUICtrlRead($txtPrvQtd)) > 99 Then
		$strAux = $strAux & "  - O campo 'Dias PRV' deve conter um valor numérico menor ou igual a 99." & @CRLF
	EndIf

	if (GUICtrlRead($txtUser) = "") or (GUICtrlRead($txtPwd) = "") or (GUICtrlRead($txtPwdCml) = "") Then
		$strAux = $strAux & "  - Preencha todos os dados de acesso" & @CRLF
	Else
		Global $UserIni = StringLeft(GUICtrlRead($txtUser),1)
		Global $UserMid = StringMid(GUICtrlRead($txtUser),2,StringLen(GUICtrlRead($txtUser))-2)
		Global $UserDig = StringRight(GUICtrlRead($txtUser),1)
		Global $UserPwd = GUICtrlRead($txtPwd)
		Global $UserPwdCml = GUICtrlRead($txtPwdCml)
	EndIf

	if $strAux = "" Then
		ProcessaPlanilha()
	Else
		MsgBox($MB_ICONERROR, $iMsgTitle,"Ocorreram inconsistências no preenchimento. Veja abaixo:" & @CRLF & @CRLF & $strAux)
	EndIf

EndFunc

Func ProcessaPlanilha() ;Função varrer a planilha e executar as ações

	;Faz ativação da janela
	WinActivate("[REGEXPTITLE:" & $WindowTitle & ".+]")

	;Aguarda ativação da janela por 10 segundos
	$nSapAtv = WinWaitActive("[REGEXPTITLE:" & $WindowTitle & ".+]", "",10)

	If $iRowCount = 0 or $iRowCount = Null Then
		_FileWriteLog($hFile, "[ERRO] ProcessaPlanilha() - Arquivo " & $s_Filename & " sem conteúdo ou arquivo já está aberto.")
		MsgBox($MB_ICONERROR, $iMsgTitle, "Erro na abertura do arquivo " & $s_Filename & ". Arquivo sem conteúdo ou arquivo já está aberto.")
		_Exit()
	Else
		_FileWriteLog($hFile, "ProcessaPlanilha() - Quantidade de linhas do arquivo Excel: " & $iRowCount)
	EndIf

	If IsArray($iArrayValues) and Ubound($iArrayValues,0)>0 then ;Valida se veio valor para o Array

		SendWait($UserIni & $UserMid,$SleepTime)
		SendWait("{TAB}",$SleepTime)
		SendWait($UserPwd,$SleepTime)
		SendWait("{ENTER}",$SleepTime)
		Sleep(1500)
		SendWait("/c0",$SleepTime) ;--Usar RC?
		SendWait("{ENTER}",$SleepTime)

		Local $FlagProcessou = 0
		Local $AuxLinha = ""


		for $x=0 to ubound($iArrayValues,2)-1

			$FlagProcessou = 0

			;Valida se a coluna "Retorno" está em branco
			if $iArrayValues[6][$x] = "" then
				Switch $iArrayValues[5][$x]
					Case "LINA"
						if (GUICtrlRead($chkTodos) = 1) or (GUICtrlRead($chkLINA) = 1) then

							$FlagProcessou = 1

							SendWait("{PAUSE}",$SleepTime)
							SendWait("{PAUSE}",$SleepTime)
							SendWait("{PAUSE}",$SleepTime)
							Sleep(1000)

							SendWait("o010{ENTER}",$SleepTime)
							SendWait("1n" & $iArrayValues[0][$x],$SleepTime) ;------- NRC
							SendWait("{ENTER}",$SleepTime)
							SendWait($UserMid & $UserDig,$SleepTime)
							SendWait("{TAB}",$SleepTime)
							SendWait("wd",$SleepTime)
							SendWait("{ENTER}",$SleepTime)

							$AuxLinha = RetornaLinhaDaTela(1)

							if StringLeft($AuxLinha,8) <> "CONSULTA" Then
								for $i = 3 to 20
									$AuxLinha = RetornaLinhaDaTela($i)
									if StringInStr($AuxLinha, "SERV OP") > 0 Then
										SendWait("x",$SleepTime)
										$iAux = RetornaLinhaDaTela(22)
									EndIf
									SendWait("{DOWN}",$SleepTime)
								Next
							EndIf

							SendWait("{ENTER}",$SleepTime,3)

							SendWait("{PAUSE}",$SleepTime)
							Sleep(2000)
							SendWait("6",$SleepTime)
							SendWait("{TAB}",$SleepTime,4)
							SendWait("insadi",$SleepTime)
							SendWait("{TAB}",$SleepTime,2)
							SendWait($UserPwdCml,$SleepTime)
							Sleep(1000)
							SendWait("{ENTER}",$SleepTime)
							Sleep(1000)
							SendWait($DataD & $DataM & $DataY,$SleepTime) ;---------- DATA

							SendWait("a",$SleepTime)
							SendWait("{TAB}",$SleepTime * 2,19)
							SendWait($classe,$SleepTime)
							SendWait($tipo,$SleepTime)
							SendWait("{TAB}",$SleepTime * 3,39)
							SendWait("e",$SleepTime)

							SendWait("{ENTER}",$SleepTime)

							Sleep(2000)

						EndIf
				EndSwitch
			EndIf

			if $FlagProcessou = 1 then
				$oDocument.range("G" &($x + 2)) = RetornaResult()
			EndIf

		Next
	Else
		_FileWriteLog($hFile, "Erro: Nenhum valor foi carregado do range " & $iRange)
		Msgbox ($MB_ICONERROR, $iMsgTitle, "Erro: Nenhum valor foi carregdo do range " & $iRange)
		_Exit()
	EndIf
	_FileWriteLog($hFile, "--- Fim da automação - " & $iAutomatioName & " ---")
	MsgBox($MB_SYSTEMMODAL, "", "Fim da automação - " & $iAutomatioName & " " & CHR(13) & "Tempo de Execução: " & Round((TimerDiff($begin)/1000), 2))

	FileClose($hFile)
	_Exit()

EndFunc

Func RetornaResult()
	Local $iAux = ""

	$iAux = RetornaLinhaDaTela(23)

	if StringInStr($iAux, "EMISSAO PERMITIDA") > 0 Then
		SendWait("{F1}",$SleepTime)
		$iAux = RetornaLinhaDaTela(22)
	Else
		SendWait("{PAUSE}",$SleepTime)
	EndIf

	return $iAux
EndFunc

Func RetornaLinhaDaTela($Linha)

	ClipPut("Vazio")
	Sleep(500)
	Local $aTela = StringSplit(ClipGet(),@CR)

	While $aTela[0] <= 1
		WinActivate("[REGEXPTITLE:" & $WindowTitle & ".+]")

		;botão Reset
		MouseMove(1249, 731)
		MouseClick("left")
		Sleep(500)

		Send("{CTRLDOWN}a{CTRLUP}")
		Send("{CTRLDOWN}c{CTRLUP}")
		Sleep(500)

		Local $aTela = StringSplit(ClipGet(),@CR)
		Sleep(500)
	WEnd

	Return _ALLTRIM(_ALLTRIM($aTela[$Linha]),@LF)

EndFunc

Func ConfirmaEncerramento()
	Local $iAnswer = MsgBox(BitOR($MB_YESNO, $MB_SYSTEMMODAL), $iMsgTitle, "Deseja interromper a execução da automação?")
	If $iAnswer = 6 Then 	; Verifica se o usuário abortou a operação
		_FileWriteLog($hFile, "--- Processo abortado pelo usuário ---")
		MsgBox(0, $iMsgTitle, "Processo abortado pelo usuário")
		_Exit()
	EndIf
EndFunc

Func SendWait($text,$sleep,$repeat=1,$format="%s",$flag=0)
	for $j = 1 to $repeat
		Send(StringFormat($format,$text),$flag)
		Sleep($sleep/$repeat)
	Next
EndFunc

Func CaptureEsc()
   Switch @HotKeyPressed ; The last hotkey pressed.
	   Case "{ESC}" ; String is the {ESC} hotkey.
			ConfirmaEncerramento()
   EndSwitch
EndFunc

Func _Exit()
   $iExcelObj.Open
   $iExcelObj.Windows(1).Visible = True
   $iExcelObj.save
   $iExcelObj.close
   $iExcelObj = Null
   Exit
EndFunc

func _ALLTRIM($sString, $sTrimChars=' ')

	;  Trim from left first, then right

	$sTrimChars = StringReplace( $sTrimChars, "%%whs%%", " " & chr(9) & chr(11) & chr(12) & @CRLF )
	local $sStringWork = ""

	$sStringWork = _LTRIM($sString, $sTrimChars)
	if $sStringWork <> "" then
		$sStringWork = _RTRIM($sStringWork, $sTrimChars)
	endif
	return $sStringWork

endfunc

func _LTRIM($sString, $sTrimChars=' ')

	$sTrimChars = StringReplace( $sTrimChars, "%%whs%%", " " & chr(9) & chr(11) & chr(12) & @CRLF )
	local $nCount, $nFoundChar
	local $aStringArray = StringSplit($sString, "")
	local $aCharsArray = StringSplit($sTrimChars, "")

	for $nCount = 1 to $aStringArray[0]
		$nFoundChar = 0
		for $i = 1 to $aCharsArray[0]
			if $aCharsArray[$i] = $aStringArray[$nCount] then
				$nFoundChar = 1
			EndIf
		next
		if $nFoundChar = 0 then return StringTrimLeft( $sString, ($nCount-1) )
	next
endfunc

func _RTRIM($sString, $sTrimChars=' ')

	$sTrimChars = StringReplace( $sTrimChars, "%%whs%%", " " & chr(9) & chr(11) & chr(12) & @CRLF )
	local $nCount, $nFoundChar
	local $aStringArray = StringSplit($sString, "")
	local $aCharsArray = StringSplit($sTrimChars, "")

	for $nCount = $aStringArray[0] to 1 step -1
		$nFoundChar = 0
		for $i = 1 to $aCharsArray[0]
			if $aCharsArray[$i] = $aStringArray[$nCount] then
				$nFoundChar = 1
			EndIf
		next
		if $nFoundChar = 0 then return StringTrimRight( $sString, ($aStringArray[0] - $nCount) )
	next
endfunc

